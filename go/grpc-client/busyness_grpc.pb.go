// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.21.12
// source: busyness.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Busyness_SendLocationID_FullMethodName = "/Busyness/SendLocationID"
)

// BusynessClient is the client API for Busyness service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The recommendation service definition
type BusynessClient interface {
	// Calling calculates a Busyness at a given LocationID
	SendLocationID(ctx context.Context, in *BusynessRequest, opts ...grpc.CallOption) (*BusynessReply, error)
}

type busynessClient struct {
	cc grpc.ClientConnInterface
}

func NewBusynessClient(cc grpc.ClientConnInterface) BusynessClient {
	return &busynessClient{cc}
}

func (c *busynessClient) SendLocationID(ctx context.Context, in *BusynessRequest, opts ...grpc.CallOption) (*BusynessReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BusynessReply)
	err := c.cc.Invoke(ctx, Busyness_SendLocationID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BusynessServer is the server API for Busyness service.
// All implementations must embed UnimplementedBusynessServer
// for forward compatibility
//
// The recommendation service definition
type BusynessServer interface {
	// Calling calculates a Busyness at a given LocationID
	SendLocationID(context.Context, *BusynessRequest) (*BusynessReply, error)
	mustEmbedUnimplementedBusynessServer()
}

// UnimplementedBusynessServer must be embedded to have forward compatible implementations.
type UnimplementedBusynessServer struct {
}

func (UnimplementedBusynessServer) SendLocationID(context.Context, *BusynessRequest) (*BusynessReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendLocationID not implemented")
}
func (UnimplementedBusynessServer) mustEmbedUnimplementedBusynessServer() {}

// UnsafeBusynessServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BusynessServer will
// result in compilation errors.
type UnsafeBusynessServer interface {
	mustEmbedUnimplementedBusynessServer()
}

func RegisterBusynessServer(s grpc.ServiceRegistrar, srv BusynessServer) {
	s.RegisterService(&Busyness_ServiceDesc, srv)
}

func _Busyness_SendLocationID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BusynessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusynessServer).SendLocationID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Busyness_SendLocationID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusynessServer).SendLocationID(ctx, req.(*BusynessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Busyness_ServiceDesc is the grpc.ServiceDesc for Busyness service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Busyness_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Busyness",
	HandlerType: (*BusynessServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendLocationID",
			Handler:    _Busyness_SendLocationID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "busyness.proto",
}
