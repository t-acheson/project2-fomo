// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.21.12
// source: recommendations.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Recommendation_SendRecommendation_FullMethodName = "/Recommendation/SendRecommendation"
)

// RecommendationClient is the client API for Recommendation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The recommendation service definition
type RecommendationClient interface {
	// Calling send a calculates a recommendation
	SendRecommendation(ctx context.Context, in *RecommendationRequest, opts ...grpc.CallOption) (*RecommendationReply, error)
}

type recommendationClient struct {
	cc grpc.ClientConnInterface
}

func NewRecommendationClient(cc grpc.ClientConnInterface) RecommendationClient {
	return &recommendationClient{cc}
}

func (c *recommendationClient) SendRecommendation(ctx context.Context, in *RecommendationRequest, opts ...grpc.CallOption) (*RecommendationReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecommendationReply)
	err := c.cc.Invoke(ctx, Recommendation_SendRecommendation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecommendationServer is the server API for Recommendation service.
// All implementations must embed UnimplementedRecommendationServer
// for forward compatibility
//
// The recommendation service definition
type RecommendationServer interface {
	// Calling send a calculates a recommendation
	SendRecommendation(context.Context, *RecommendationRequest) (*RecommendationReply, error)
	mustEmbedUnimplementedRecommendationServer()
}

// UnimplementedRecommendationServer must be embedded to have forward compatible implementations.
type UnimplementedRecommendationServer struct {
}

func (UnimplementedRecommendationServer) SendRecommendation(context.Context, *RecommendationRequest) (*RecommendationReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRecommendation not implemented")
}
func (UnimplementedRecommendationServer) mustEmbedUnimplementedRecommendationServer() {}

// UnsafeRecommendationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecommendationServer will
// result in compilation errors.
type UnsafeRecommendationServer interface {
	mustEmbedUnimplementedRecommendationServer()
}

func RegisterRecommendationServer(s grpc.ServiceRegistrar, srv RecommendationServer) {
	s.RegisterService(&Recommendation_ServiceDesc, srv)
}

func _Recommendation_SendRecommendation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecommendationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecommendationServer).SendRecommendation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Recommendation_SendRecommendation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecommendationServer).SendRecommendation(ctx, req.(*RecommendationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Recommendation_ServiceDesc is the grpc.ServiceDesc for Recommendation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Recommendation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Recommendation",
	HandlerType: (*RecommendationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendRecommendation",
			Handler:    _Recommendation_SendRecommendation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "recommendations.proto",
}
